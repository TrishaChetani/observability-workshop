buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "gradle.plugin.de.db.vz:msintplugin:1.1.7"
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'de.db.vz.msintplugin'

group = 'devops-school'
version = '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


jar {
    baseName = 'imageholder'
    version = null
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile 'commons-io:commons-io:2.6'

    compile 'io.prometheus:simpleclient_hotspot:0.0.26'
    compile 'io.prometheus:simpleclient_servlet:0.0.26'
    compile 'io.prometheus:simpleclient_spring_boot:0.0.26'

    testCompile 'com.github.fakemongo:fongo:2.0.9'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}


task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
            subProject.configurations.each { configuration ->
                resolveConfiguration(configuration)
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}

task buildDocker(dependsOn: build) {
    String sourceJar = "${project.buildDir}/libs/${jar.archiveName}"
    String target = "${project.projectDir}/src/main/docker/"
    String targetJar = "$target/$jar.archiveName"
    String registry = 'docker.maibornwolff.de'
    ext.tag = "$registry/${project.group}/${jar.baseName}:${project.version}"

    doLast {
        exec {
            commandLine 'cp', sourceJar, target
        }
        exec {
            commandLine 'docker', 'build', '-t', tag, target
        }
        exec {
            commandLine 'rm', '-f', targetJar
        }
    }
}

task pushDocker(dependsOn: buildDocker) {
    doLast {
        exec {
            commandLine 'docker', 'push', buildDocker.tag
        }
    }
}

integrationTestUp.dependsOn buildDocker
